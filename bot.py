import asyncio
import logging
import colorama
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandObject
from datetime import datetime
from config_reader import config
from aiogram import F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram import html
from aiogram.utils.formatting import Text, Bold, Italic, Underline
logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.bot_token.get_secret_value(), parse_mode="HTML")
dp = Dispatcher()

dp["started_at"] = datetime.now().strftime("%d/%m/%Y %H:%M:%S")

async def on_startup(dp: Dispatcher):
    await dp.start_polling(bot, mylist=[1, 2, 3])


#handler command start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [types.KeyboardButton(text='–¥–∂–µ–¥–∞–π')],
        [types.KeyboardButton(text='—Å–∏—Ç—Ö')]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="—â–æ –æ–±–µ—Ä–µ—à –≤ –ª–∏—Å—Ç–æ–ø–∞–¥—ñ"
    )
    await message.answer("–ª–∏—Å—Ç–æ–ø–∞–¥", reply_markup=keyboard)

@dp.message(F.text.lower() == "–¥–∂–µ–¥–∞–π")
async def djedai(message: types.Message):
    await message.reply("–¢—Ä—É—à–Ω–æ")

@dp.message(F.text.lower() == "—Å–∏—Ç—Ö")
async def sitkh(message: types.Message):
    await message.reply(f"–¢–∏ –æ–±—ñ—Ü—è–≤ –±–æ—Ä–æ—Ç–∏—Å—è –∑—ñ –∑–ª–æ–º, –∞ –Ω–µ –ø—Ä–∏–º–∫–Ω—É—Ç–∏ –¥–æ –Ω—å–æ–≥–æ")

@dp.message(Command("help"))
async def cmd_reply(message: types.Message):
    await message.reply("What do u need?")

@dp.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")

@dp.message(F.text, Command("echo"))
async def echo_with_time(message: types.Message):
    time_now = datetime.now().strftime("%H:%M:%S")
    added_text = html.underline(f"Created in {time_now}")
    await message.answer(f"{message.html_text}\n{added_text}", parse_mode="HTML")



@dp.message(F.text, Command("test"))
async def any_message(message: Message):
    await message.answer(
        "–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ <u>–•–¢–ú–õ —Ä–æ–∑–º—ñ—Ç–∫–æ—é</u>"
    )
    await message.answer(
        "Hello, *world*\!",
        parse_mode=ParseMode.MARKDOWN_V2
    )


@dp.message(Command("hello"))
async def cmd_hello(message: types.Message):
    content = Text(
        "Hello, ",
        Bold(message.from_user.full_name)
    )
    await message.answer(
        **content.as_kwargs()

    )


@dp.message(Command("settimer"))
async def cmd_settimer(
        message: Message,
        command: CommandObject
):
    #—è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ñ –Ω—ñ—è–∫—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, —Ç–æ
    # command.args –±—É–¥–µ None
    if command.args is None:
        await message.answer(
            "–ü–æ–º–∏–ª–∫–∞, –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –≤–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Ç—É–ø—ñ –±–ª—ñ–Ω–∞"
        )
        return
    #–ü—Ä–æ–±—É—î–º–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –Ω–∞ –¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ –ø–æ –ø–µ—Ä—à–æ–º—É –∑—É—Å—Ç—Ä—ñ—á–Ω–æ–º—É –ø—Ä–æ–±—ñ–ª—É
    try:
        delay_time, text_to_send = command.args.split(" ", maxsplit=1)
    #–Ø–∫—â–æ –æ—Ç—Ä–∏–º–∞–ª–æ –º–µ–Ω—à–µ –Ω—ñ–∂ –¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏, –≤–∏–ª—ñ—Ç–∞—î ValueError(–ø–æ–º–∏–ª–∫–∞ –∑–Ω–∞—á–µ–Ω–Ω—è)
    except ValueError:
        await message.answer(
            "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –ü—Ä–∏–∫–ª–∞–¥:\n"
            "/settimer <time> <message>"
        )
        return
    await message.answer(
        "–¢–∞–π–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏–π!\n"
        f"–ß–∞—Å: {delay_time}\n"
        f"–¢–µ–∫—Å—Ç: {text_to_send}"
    )

@dp.message(Command("info"))
async def cmd_info(message: types.Message, started_at: str):
    await message.answer(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π {started_at}")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())




